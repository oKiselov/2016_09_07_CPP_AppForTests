<num>01
<question>
Что выведется на экран в результате выполнения следующего кода:

#include <iostream>
using namespace std;

class A{
    int a;
public:
    A(int x)
    {
        a = x;
        cout << "A(" << a << ")\n";
    }


    ~A()
    {
        cout << "~A(" << a << ")\n";
    }
    void show()
    {
        cout << a << "\n";
    }

};
void main(){
    A a1(1);
    A a2(2);
}

1. Ошибка на этапе компиляции
2. Ошибка на этапе выполнения
3.A(1)
A(2)
~A(2)
~A(1)
4.A(1)
A(2)
~A(1)
~A(2)
5.A(1)
~A(1)
A(2)
~A(2)
<answer>1
<num>02
<question>
Что выведется на экран в результате выполнения следующего кода:

#include <iostream>
using namespace std;
class A{
    int a;
public:
    A()
    {
        a = 0;
    }
    A(int x)
    {
        a = x;
    }
    void show()
    {
        cout << a << "\n";
    }
};
void main(){
    A a1, a2(1);
    a1.show();
    a2.show();
}

1. 1
   0
2. 0
   1
3. Ошибка на этапе выполнения
4. Ошибка на этапе компиляции
5. 1
   1
<answer>1
<num>03
<question>
Что выведется на экран в результате выполнения следующего кода:

#include <iostream>
using namespace std;

class A{
    int a;
    A()
    {
        a = 7;
    }
public:
    void show()
    {
        cout << a << "\n";
    }
};
void main(){
    A a1;
    a1.show();
}

1. 0
2. 7
3. Ошибка на этапе компиляции
4. Неопределенное значение
5. Ошибка на этапе выполнения
<answer>1
<num>04
<question>
Члены класса, объявленные в секции public
1. Доступны только глобальным функциям
2. Доступны только извне
3. Доступны всем
4. Доступны только в методах данного класса
5. Правильного ответа нет
<answer>1
<num>05
<question>
Укажите справедливoе замечаниe касательно деструктора класса
1. Для деструктора не определяется тип возвращаемого значения
2. Деструктор всегда определяется с типом void 
3. Количество деструкторов должно совпадать с количеством конструкторов 
4. Деструктор вызывается автоматически при удалении объекта
5. Без явного вызова деструктора уничтожение объекта невозможно 
<answer>1
<num>06
<question>
Что выведется на экран в результате выполнения следующего кода:

#include <iostream>
using namespace std;

class A{
    int a;
public:
    void set(int x)
    {
        a = x;
    }
    void show()
    {
        cout << a << "\n";
    }
};
void main(){
    A a1;
    a1.set(5);
    a1.show();
}

1. 5
2. Неопределенное значение
3. Ошибка на этапе выполнения
4. Ошибка на этапе компиляции
5. 0
<answer>1
<num>07
<question>
Члены класса, объявленные в секции private
1. Это константы
2. Доступны всем
3. Доступны только в методах данного класса
4. Могут быть только свойствами, но не методами
5. Правильного ответа нет
<answer>1
<num>08
<question>
Что выведется на экран в результате выполнения следующего кода:

#include <iostream>
using namespace std;

class A{
    int a;
};

void main()
{
    A a1;
    a1.a = 10;
    cout << a1.a << "\n";
}

1. Ошибка на этапе выполения
2. Ошибка на этапе компиляции
3. 10
4. Неопределенное значение
5. 0
<answer>1
<num>09
<question>
Какой из примеров полиморфизма нам знаком по курсу "С"
1. Функции с переменным числом параметров
2. Встраиваемые функции
3. Рекурсия
4. Перегруженные функции
5. Правильного ответа нет
<answer>1
<num>10
<question> Укажите справедливые утверждения касательно конструктора класса
1. Конструктор не имеет параметров
2. Конструктор вызывается автоматически при создании экземпляра класса
3. Для конструктора не определяется тип возвращаемого значения
4. У класса может быть только один конструктор
5. Основное назначение конструктора: инициализация объекта
<answer>1
<num>11
<question>
Что выведется на экран в результате выполнения следующего кода:

#include <iostream>
using namespace std;

class A{
    int a;
public:
    void A()
    {
        a = 0;
    }
    void show()
    {
        cout << a << "\n";
    }
};
void main(){
    A a1;
    a1.show();
}

1. Ответ неопределен
2. Ошибка на этапе выполнения
3. Ошибка на этапе компиляции
4. 0
5. a
<answer>1
<num>12
<question>
Что выведется на экран в результате выполнения следующего кода:

#include 
using namespace std;

class A{
    int a = 0;
};

void main()
{
    A a1;
    cout << a1.a << "\n";
}
1. Ошибка на этапе компиляции
2. 0
3. Неопределенное значение
4. Ошибка на этапе выполнения
5. a
<answer>1
<num>13
<question>
Какие из ниже перечисленных принципов можно назвать основными в ООП
1. Полиморфизм
2. Наследование
3. Инкапсуляция
4. Алгоритмизация
5. Металлизация
<answer>1